#include <iostream>
#include "DoublyLinkedList.h"

using namespace std;

int main()
{
	Node* NewNode = NULL;
	Node* List = NULL;

	Node* Current = NULL;
	


	//노드 3개 생성 그리고 List에 연결
	NewNode = DLL_CreateNode(10);
	DLL_AppendNode(&List, NewNode);

	NewNode = DLL_CreateNode(30);
	DLL_AppendNode(&List, NewNode);

	NewNode = DLL_CreateNode(50);
	DLL_AppendNode(&List, NewNode);

	Current = List;
	while (Current->next_node!= NULL) {
		cout << Current->data << "->";
		Current=Current->next_node;
	}
	
	//현재 위치는 마지막 node인데, 마지막 노드에서 맨 앞까지 
	//cout으로 찍어보기
	while (Current != NULL) {
		cout << Current->data << "->";
		Current = Current->pre_node;
	}
	cout << endl << endl;

	//약식삭제

	Node* Next = NULL;

	Current = List;

	while (Current != NULL) {

		Next = Current->next_node;
		cout << Current->data << " 삭제" << endl;
		free(Current);
		Current = Next;

	}




}

//1. 노드의 생성
Node* DLL_CreateNode(Element NewData) {

	Node* NewNode = (Node*)malloc(sizeof(Node));

	NewNode->data = NewData;
	NewNode->pre_node = NULL;
	NewNode->next_node = NULL;
	return NewNode;

}

//2. 노드의 추가
void DLL_AppendNode(Node** Head, Node* NewNode) {

	//*Head에 아무 것도 없다면
	if (*Head == NULL) {
		//*Head는 NewNode이다.
		*Head = NewNode;
	}
	else 
	{

		Node* Tail = *Head;

		//Tail의 다음노드가 NULL이 아닐때 까지 반복하기
		while (Tail->next_node!=NULL ) {

			//Tail을 Tail이 가지고 있는 다음노드로 바꾸기
			Tail = Tail->next_node;
		}

		//위의 로직이 끝나면 마지막 노드로 이동이됨
		//마지막 노드가가르키는 다음 노드는 NewNode이다.
		Tail->next_node = NewNode;
		
		NewNode->pre_node = Tail;
	
	}


}

//3. 노드의 탐색
Node* DLL_GetNodeAt(Node* Head, int Location) {

	Node* Current = Head;

	//Current가 NULL이 아닐때까지 그리고 
	// (--Location)이 0보다 크거나 같을때까지 반복
							
	while (Current!=NULL && (--Location)>=0) 
	{
		Current = Current->next_node;
	}
	
	return Current;
}


//========================아래는 헤더파일 =========================


//"DoublyLinkedList.h" 헤더파일 이름


#ifndef DOUBLY_LINKED_LIST
#define DOUBLY_LINKED_LIST

typedef int Element;

typedef struct _node {

    Element data;
    struct _node* pre_node;
    struct _node* next_node;

}Node;

Node* DLL_CreateNode(Element NewData);
void DLL_AppendNode(Node** Head, Node* NewNode);
Node* DLL_GetNodeAt(Node* Head, int Location);

#endif
